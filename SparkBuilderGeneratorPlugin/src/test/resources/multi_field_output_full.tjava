import javax.annotation.Nonnull;
import javax.annotation.Generated;

public class TestClass {
    private String testField;
    private Integer data;
    private long something;
    private List<String> list;

    @Generated("SparkTools")
    private TestClass(Builder builder) {
        this.testField = builder.testField;
        this.data = builder.data;
        this.something = builder.something;
        this.list = builder.list;
    }

    /** 
    * Creates builder to build {@link TestClass}.
    * @return created builder
    */
    @Generated("SparkTools")
    public static Builder builder() {
        return new Builder();
    }

    /** 
    * Builder to build {@link TestClass}.
    */
    @Generated("SparkTools")
    public static final class Builder {
        private String testField;
        private Integer data;
        private long something;
        private List<String> list;

        private Builder() {
        }

        /** 
        * Builder method for testField parameter.
        * @param testField field to set
        * @return builder
        */
        @Nonnull
        public Builder withTestField(@Nonnull String testField) {
            this.testField = testField;
            return this;
        }

        /** 
        * Builder method for data parameter.
        * @param data field to set
        * @return builder
        */
        @Nonnull
        public Builder withData(@Nonnull Integer data) {
            this.data = data;
            return this;
        }

        /** 
        * Builder method for something parameter.
        * @param something field to set
        * @return builder
        */
        @Nonnull
        public Builder withSomething(@Nonnull long something) {
            this.something = something;
            return this;
        }

        /** 
        * Builder method for list parameter.
        * @param list field to set
        * @return builder
        */
        @Nonnull
        public Builder withList(@Nonnull List<String> list) {
            this.list = list;
            return this;
        }

        /** 
        * Builder method of the builder.
        * @return built class
        */
        @Nonnull
        public TestClass build() {
            return new TestClass(this);
        }
    }
}